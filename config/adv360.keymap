/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL                 &kp N1      &kp N2       &kp N3      &kp N4        &kp N5  &tog 1                                                                                               &mo 0        &kp N6  &kp N7        &kp N8      &kp N9       &kp N0         &kp MINUS
&kp CAPSLOCK              &kp Q       &kp W        &kp E       &kp R         &kp T   &none                                                                                                &none        &kp Y   &kp U         &kp I       &kp O        &kp P          &kp BSLH
&hm LS(LA(LCTRL)) ESCAPE  &hm LALT A  &hm LCTRL S  &hm LGUI D  &hm LSHIFT F  &kp G   &none            &kp LALT       &kp HOME              &kp END            &kp LALT                    &none        &kp H   &hm RSHIFT J  &hm RGUI K  &hm RCTRL L  &hm RALT SEMI  &kp SQT
&kp LSHIFT                &kp Z       &kp X        &kp C       &kp V         &kp B                                   &kp LEFT_COMMAND      &kp RIGHT_COMMAND                                           &kp N   &kp M         &kp COMMA   &kp DOT      &kp FSLH       &kp RSHFT
&mo 2                     &kp GRAVE   &kp CAPS     &kp LEFT    &kp RIGHT             &lt 1 BACKSPACE  &hm LCTRL TAB  &kp LCTRL             &kp RCTRL          &hm LS(LA(LC(LGUI))) ENTER  &lt 2 SPACE          &kp UP        &kp DOWN    &kp LBKT     &kp RBKT       &mo 2
            >;
        };

        layer_keypad {
            bindings = <
&trans  &kp F1           &kp F2            &kp F3             &kp F4                &kp F5                 &trans                                      &mo 0      &kp F6           &kp F7           &kp F8           &kp F9        &kp F10        &kp F11
&trans  &kp EXCLAMATION  &kp AT_SIGN       &kp POUND          &kp DOLLAR            &kp PERCENT            &none                                       &none      &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS  &kp KP_DIVIDE  &kp F12
&trans  &kp CARET        &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none   &trans  &trans      &trans  &trans  &none      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &kp ASTERISK   &kp SQT
&trans  &kp Z            &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE                        &trans      &trans                     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT    &kp KP_EQUAL   &kp KP_ENTER
&trans  &kp GRAVE        &kp CAPS          &kp LEFT           &kp RIGHT                                    &none   &trans  &trans      &trans  &trans  &kp KP_N0                   &kp UP           &kp DOWN         &none         &none          &none
            >;
        };

        layer_player {
            bindings = <
&trans  &trans  &trans             &trans        &trans            &trans      &tog 1                                      &mo 0   &kp PAGE_UP    &trans              &trans              &trans     &trans  &trans
&trans  &trans  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &kp C_MUTE        &kp C_PREV  &none                                       &none   &kp PAGE_DOWN  &kp HOME            &trans              &kp END    &trans  &trans
&trans  &trans  &trans             &kp C_STOP    &kp C_PLAY_PAUSE  &kp C_NEXT  &none   &trans  &trans      &trans  &trans  &none   &kp LEFT       &kp DOWN            &kp UP              &kp RIGHT  &trans  &trans
&trans  &trans  &trans             &trans        &trans            &trans                      &trans      &trans                  &trans         &kp C_AL_PREV_TASK  &kp C_AL_NEXT_TASK  &trans     &trans  &trans
&trans  &trans  &trans             &trans        &trans                        &trans  &trans  &trans      &trans  &trans  &trans                 &trans              &trans              &trans     &trans  &trans
            >;
        };
    };
};
